{"version":3,"sources":["utility/MUTATION.js","utility/QUERY.js","components/Task/TaskCard.js","containers/TaskIndex.js","context/authCtx.js","components/Login/SignIn.js","components/Login/SignUp.js","components/Login/LoginIndex.js","components/Shared/Login.js","components/List/AddBttn.js","components/List/CompleteBttn.js","components/List/DeleteBttn.js","components/List/ActiveBttn.js","components/List/ListTable.js","utility/SUBSCRIPTION.js","context/TabSubscription.js","components/List/List.js","components/Task/TaskAdd.js","components/TaskTab/PersonalTab.js","components/TaskTab/CorporateTab.js","components/Shared/TaskTab.js","components/Shared/Corporaters.js","components/Shared/Panel.js","App.js","utility/config.js","serviceWorker.js","index.js"],"names":["ADD_TASK_MUTATION","gql","_templateObject","DELETE_TASK","_templateObject2","LINK_TASK","_templateObject3","ADD_TODO","_templateObject4","UPDATE_TODO","_templateObject5","DELETE_TODO","_templateObject6","ME_QUERY","QUERY_templateObject","LIST_QUERY","QUERY_templateObject2","QUERY_templateObject3","TASKS_QUERY","QUERY_templateObject4","COOPERATORS_QUERY","QUERY_templateObject5","Meta","Card","TaskCard","props","task","react_default","a","createElement","react_apollo_esm","mutation","update","cache","_ref","taskId","data","deleteTask","id","me","readQuery","query","tasks","variables","userId","filter","t","Object","objectSpread","writeQuery","optimisticResponse","__typename","className","card","style","width","actions","popover","placement","title","content","serialNum","trigger","icon","type","onClick","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","sent","stop","react_router_dom","to","concat","avatar","name","description","color","backgroundColor","TaskIndex","React","memo","loading","error","map","Task_TaskCard","key","AuthCtx","createContext","Consumer","LOGIN_USER_MUTATION","SignIn_templateObject","Form","create","getFieldDecorator","form","_useContext","useContext","dispatch","state","handleType","useCallback","e","handleSubmit","_callee2","_context2","preventDefault","validateFields","_ref2","err","values","_ref3","signin","user","email","console","log","_x3","_x4","apply","this","arguments","_x","_x2","refetchQueries","_ref4","es_form","onSubmit","Item","rules","required","message","input","prefix","placeholder","es_button","htmlType","href","ADD_USER_MUTATION","SignUp_templateObject","res","createUser","TabPane","Tabs","LoginIndex","_useState","useState","_useState2","slicedToArray","activeTab","setTab","tabs","defaultActiveKey","onChange","tabIndex","tab","Login_SignIn","Login_SignUp","CurrentUser","undefined","Login","showModal","switchModal","Provider","value","children","modal","visible","closable","maskClosable","onCancel","footer","Login_LoginIndex","AddBttn","todoContent","setContent","User","updateTask","list","toConsumableArray","taskName","target","todo","CompleteBttn","updateTodo","todoId","completedBy","status","MutationBttn","deleteTodo","ActiveBttn","withRouter","columns","dataIndex","render","text","record","Fragment","lib_default","date","createdAt","dropdown","overlay","menu","List_CompleteBttn","match","params","TaskId","List_ActiveBttn","DeleteBttn","marginLeft","todoStatus","subscribeToNewTodos","subscribeToDeleteTodos","subscribeToEditTodos","L","useEffect","table","rowKey","dataSource","TODO_ADD_SUBSCRIPTION","SUBSCRIPTION_templateObject","TODO_EDIT_SUBSCRIPTION","SUBSCRIPTION_templateObject2","TODO_DELETE_SUBSCRIPTION","SUBSCRIPTION_templateObject3","TabSubscription","initialState","reducer","action","updatedTask","enhanceTabSub","withApollo","useReducer","useStateValue","setStatus","_useStateValue","_useStateValue2","subscribeToMore","List_AddBttn","es_radio","Group","Button","List_ListTable","document","updateQuery","subscriptionData","taskIds","DeleteTodo","deleteTodoID","setSerialNum","_useState3","_useState4","disableBttn","setDisableBttn","_props$form","setFieldsValue","createTask","t0","size","disabled","block","divider","linkTask","PersonalTab","es_list","itemLayout","renderItem","item","latestTodo","slice","createdBy","updatedAt","CorporateTab","sortBy","TaskTab","corporateTasks","TaskTab_TabPane","TaskTab_PersonalTab","TaskTab_CorporateTab","Corporaters","cooperators","u","tooltip","Sider","Layout","Panel","showTaskModal","taskNotice","switchNotice","isEmpty","length","notification","popUp","breakpoint","collapsedWidth","onBreakpoint","broken","theme","shape","Shared_TaskTab","Shared_Corporaters","Task_TaskAdd","subscription","TaskAdded","popUpNotice","UpdateTodo","Header","Content","Footer","process","httpLink","HttpLink","uri","credentials","wsLink","WebSocketLink","App_ref","defineProperty","reconnect","link","split","_getMainDefinition","getMainDefinition","kind","operation","client","ApolloClient","InMemoryCache","App","Shared_Login","layout","Shared_Panel","background","padding","margin","react_router","exact","path","component","List","textAlign","Component","Boolean","window","location","hostname","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7ff5d7a.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nconst ADD_TASK_MUTATION = gql`\n  mutation ADD_TASK_MUTATION($name: String!) {\n    createTask(data: { name: $name }) {\n      id\n      name\n      serialNum {\n        serialNum\n      }\n    }\n  }\n`;\n\nconst DELETE_TASK = gql`\n  mutation($taskId: ID!) {\n    deleteTask(where: { id: $taskId }) {\n      id\n    }\n  }\n`;\n\nconst LINK_TASK = gql`\n  mutation($serialNum: ID!) {\n    linkTask(serialNum: $serialNum) {\n      tasks {\n        id\n      }\n    }\n  }\n`;\n\nconst ADD_TODO = gql`\n  mutation updateTask($id: ID!, $taskName: String, $todo: String!, $userId: ID!) {\n    updateTask(\n      where: { id: $id }\n      data: { name: $taskName, list: { create: { name: $todo, createdBy: { connect: { id: $userId } } } } }\n    ) {\n      id\n      name\n      list {\n        id\n        name\n        status\n        createdAt\n        updatedAt\n        completedBy {\n          name\n        }\n        createdBy {\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst UPDATE_TODO = gql`\n  mutation updateTodo($id: ID!, $taskId: ID!, $completedBy: ID!, $status: TodoStatus!) {\n    updateTodo(\n      where: { id: $id }\n      data: { completedBy: { connect: { id: $completedBy } }, status: $status }\n      taskId: $taskId\n    ) {\n      id\n      name\n      updatedAt\n      completedBy {\n        name\n      }\n      status\n    }\n  }\n`;\n\nconst DELETE_TODO = gql`\n  mutation deleteTodo($id: ID!, $taskId: ID!) {\n    deleteTodo(where: { id: $id }, taskId: $taskId) {\n      id\n      name\n      completedBy {\n        name\n      }\n      status\n      updatedAt\n    }\n  }\n`;\nexport { ADD_TASK_MUTATION, DELETE_TASK, LINK_TASK, ADD_TODO, UPDATE_TODO, DELETE_TODO };\n","import gql from \"graphql-tag\";\n\nconst ME_QUERY = gql`\n  query ME_QUERY {\n    me {\n      id\n      name\n      tasks {\n        id\n        name\n        serialNum {\n          serialNum\n        }\n      }\n    }\n  }\n`;\n\nconst SINGLE_TASK_QUERY = gql`\n  query SINGLE_TASK_QUERY($id: ID!) {\n    task(where: { id: $id }) {\n      id\n      name\n      serialNum {\n        serialNum\n      }\n      list {\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst LIST_QUERY = gql`\n  query LIST_QUERY($id: ID!) {\n    task(where: { id: $id }) {\n      id\n      name\n      createdAt\n      list {\n        id\n        name\n        status\n        createdAt\n        updatedAt\n        completedBy {\n          name\n        }\n        createdBy {\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst TASKS_QUERY = gql`\n  query TASKS_QUERY($userId: ID!) {\n    tasks(where: { cooperators_some: { id: $userId } }) {\n      id\n      name\n      createdAt\n      cooperators {\n        id\n        name\n      }\n      list {\n        id\n        name\n        createdAt\n        updatedAt\n        completedBy {\n          name\n        }\n        createdBy {\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst COOPERATORS_QUERY = gql`\n  query COOPERATORS_QUERY($userId: ID!) {\n    cooperators(userId: $userId) {\n      id\n      name\n    }\n  }\n`;\n\nexport { ME_QUERY, SINGLE_TASK_QUERY, LIST_QUERY, TASKS_QUERY, COOPERATORS_QUERY };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Icon, Avatar, Popover } from \"antd\";\nimport { Mutation } from \"react-apollo\";\nimport { DELETE_TASK } from \"../../utility/MUTATION\";\nimport { ME_QUERY, TASKS_QUERY } from \"../../utility/QUERY\";\nconst { Meta } = Card;\n\nconst TaskCard = props => {\n  const { task } = props;\n  const update = (\n    cache,\n    {\n      data: {\n        deleteTask: { id: taskId }\n      }\n    }\n  ) => {\n    const { me } = cache.readQuery({ query: ME_QUERY });\n    let { tasks } = cache.readQuery({ query: TASKS_QUERY, variables: { userId: me.id } });\n    tasks = tasks.filter(t => t.id !== taskId);\n    const data = { ...me, tasks: me.tasks.filter(task => task.id !== taskId) };\n    cache.writeQuery({\n      query: ME_QUERY,\n      data: { me: data }\n    });\n\n    cache.writeQuery({\n      query: TASKS_QUERY,\n      variables: { userId: me.id },\n      data: { tasks }\n    });\n  };\n  return (\n    <Mutation\n      mutation={DELETE_TASK}\n      update={update}\n      optimisticResponse={{\n        __typename: \"Mutation\",\n        deleteTask: {\n          __typename: \"Task\",\n          id: task.id\n        }\n      }}\n    >\n      {deleteTask => (\n        <div className=\"col-md-4\">\n          <Card\n            style={{ width: \"100%\" }}\n            actions={[\n              <Popover\n                placement=\"topLeft\"\n                title={null}\n                content={<div>{task.serialNum.serialNum}</div>}\n                trigger=\"click\"\n              >\n                <Icon type=\"team\" />\n              </Popover>,\n              <Icon onClick={async () => await deleteTask({ variables: { taskId: task.id } })} type=\"edit\" />\n            ]}\n          >\n            <Link to={`/list/${task.id}`}>\n              <Meta\n                avatar={<h5>ge</h5>}\n                title={task.name}\n                description={\n                  <div>\n                    <Avatar style={{ color: \"#f56a00\", backgroundColor: \"#fde3cf\" }}>US</Avatar>\n                    <Avatar style={{ color: \"#f56a00\", backgroundColor: \"#fde3cf\" }}>AK</Avatar>\n                    <Avatar style={{ color: \"#f56a00\", backgroundColor: \"#fde3cf\" }}>DK</Avatar>\n                  </div>\n                }\n              />\n            </Link>\n          </Card>\n        </div>\n      )}\n    </Mutation>\n  );\n};\n\nTaskCard.propTypes = {};\nexport default TaskCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Query } from \"react-apollo\";\nimport TaskCard from \"../components/Task/TaskCard\";\nimport { ME_QUERY } from \"../utility/QUERY\";\nconst TaskIndex = React.memo(props => {\n  return (\n    <Query query={ME_QUERY}>\n      {({ loading, error, data }) => {\n        if (loading) return <p>Loading...</p>;\n        if (error) return <p>Error :(</p>;\n        return (\n          <div className=\"container p-3\">\n            <div className=\"row\">\n              {data.me.tasks.map(task => (\n                <TaskCard key={task.id} task={task} />\n              ))}\n            </div>\n          </div>\n        );\n      }}\n    </Query>\n  );\n});\n\nTaskIndex.propTypes = {};\nexport default TaskIndex;\n","import React, { createContext, useReducer } from \"react\";\n\nconst AuthCtx = createContext();\nconst initialState = { user: { name: \"\", id: \"\", email: \"\" } };\n\nlet reducer = (state, action) => {\n  switch (action.type) {\n    case \"reset\":\n      return initialState;\n    case \"userLogin\":\n      return { ...state, user: action.user };\n  }\n};\n\nconst AuthCtxProvider = props => {\n  let [state, dispatch] = useReducer(reducer, initialState);\n  let value = { state, dispatch };\n  return <AuthCtx.Provider value={value}>{props.children}</AuthCtx.Provider>;\n};\n\nconst AuthCtxConsumer = AuthCtx.Consumer;\n\nexport { AuthCtx, AuthCtxProvider, AuthCtxConsumer };\n","import React, { useContext, useCallback } from \"react\";\nimport { Form, Icon, Input, Button } from \"antd\";\nimport gql from \"graphql-tag\";\nimport { Link } from \"react-router-dom\";\nimport { ME_QUERY } from \"../../utility/QUERY\";\nimport { Mutation } from \"react-apollo\";\nimport { AuthCtx } from \"../../context/authCtx\";\n\nconst LOGIN_USER_MUTATION = gql`\n  mutation signin($email: String!, $password: String!) {\n    signin(email: $email, password: $password) {\n      id\n      name\n    }\n  }\n`;\n\nconst SignIn = props => {\n  const { getFieldDecorator } = props.form;\n  const { state, dispatch } = useContext(AuthCtx);\n  const handleType = useCallback((e, mutation) => handleSubmit(e, mutation));\n  const handleSubmit = async (e, mutation) => {\n    e.preventDefault();\n    props.form.validateFields(async (err, values) => {\n      if (!err) {\n        const data = { ...values };\n        const {\n          data: { signin }\n        } = await mutation({ variables: data });\n        dispatch({\n          type: \"userLogin\",\n          user: {\n            name: signin.name,\n            id: signin.id,\n            email: signin.email\n          }\n        });\n        console.log(\"Hello res\", signin); // log is here\n      }\n    });\n  };\n  return (\n    <Mutation mutation={LOGIN_USER_MUTATION} refetchQueries={[{ query: ME_QUERY }]}>\n      {(signin, { loading }) => {\n        return (\n          <Form onSubmit={e => handleType(e, signin)} className=\"login-form\">\n            <Form.Item>\n              {getFieldDecorator(\"email\", {\n                rules: [{ required: true, message: \"Please input your username!\" }]\n              })(\n                <Input\n                  prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n                  placeholder=\"E-Mail\"\n                />\n              )}\n            </Form.Item>\n            <Form.Item>\n              {getFieldDecorator(\"password\", {\n                rules: [{ required: true, message: \"Please input your Password!\" }]\n              })(\n                <Input\n                  prefix={<Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n                  type=\"password\"\n                  placeholder=\"Password\"\n                />\n              )}\n            </Form.Item>\n            <Form.Item>\n              <div className=\"d-flex flex-column \">\n                <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                  Log in\n                </Button>\n                <a className=\"login-form-forgot\" href=\"\">\n                  Forgot password\n                </a>\n              </div>\n            </Form.Item>\n          </Form>\n        );\n      }}\n    </Mutation>\n  );\n};\n\nexport default React.memo(Form.create()(SignIn));\n","import React from \"react\";\nimport { Form, Icon, Input, Button, Checkbox } from \"antd\";\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\n\nconst ADD_USER_MUTATION = gql`\n  mutation createUser($username: String!, $email: String!, $password: String!) {\n    createUser(data: { name: $username, email: $email, password: $password }) {\n      id\n      name\n    }\n  }\n`;\n\nconst SignUp = props => {\n  const { getFieldDecorator } = props.form;\n  const handleSubmit = async (e, mutation) => {\n    e.preventDefault();\n    props.form.validateFields(async (err, values) => {\n      if (!err) {\n        console.log(\"Received values of form: \", values);\n        const data = { ...values };\n        console.log(\"Hello data\", data); // log is here\n        const res = await mutation({ variables: data });\n        console.log(\"Hello res\", res); // log is here\n      }\n    });\n  };\n\n  return (\n    <Mutation mutation={ADD_USER_MUTATION}>\n      {(createUser, { loading }) => {\n        return (\n          <Form onSubmit={e => handleSubmit(e, createUser)} className=\"login-form\">\n            <Form.Item>\n              {getFieldDecorator(\"username\", {\n                rules: [{ required: true, message: \"Please input your username!\" }]\n              })(\n                <Input\n                  prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n                  placeholder=\"Username\"\n                />\n              )}\n            </Form.Item>\n            <Form.Item>\n              {getFieldDecorator(\"email\", {\n                rules: [{ required: true, message: \"Please input your username!\" }]\n              })(\n                <Input\n                  prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n                  placeholder=\"E-Mail\"\n                />\n              )}\n            </Form.Item>\n            <Form.Item>\n              {getFieldDecorator(\"password\", {\n                rules: [{ required: true, message: \"Please input your Password!\" }]\n              })(\n                <Input\n                  prefix={<Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n                  type=\"password\"\n                  placeholder=\"Password\"\n                />\n              )}\n            </Form.Item>\n            <Form.Item>\n              {getFieldDecorator(\"comfirm password\", {\n                rules: [{ required: true, message: \"Please input your Password!\" }]\n              })(\n                <Input\n                  prefix={<Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n                  type=\"password\"\n                  placeholder=\"Enter Password Again\"\n                />\n              )}\n            </Form.Item>\n            <Form.Item>\n              <div className=\"d-flex flex-column \">\n                <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                  Sign Up\n                </Button>\n                <a className=\"login-form-forgot\" href=\"\">\n                  Forgot password\n                </a>\n              </div>\n            </Form.Item>\n          </Form>\n        );\n      }}\n    </Mutation>\n  );\n};\n\nexport default Form.create()(SignUp);\n","import React, { useState } from \"react\";\nimport { Tabs } from \"antd\";\nimport SignIn from \"./SignIn\";\nimport SignUp from \"./SignUp\";\nconst TabPane = Tabs.TabPane;\n\nconst LoginIndex = () => {\n  const [activeTab, setTab] = useState(\"1\");\n  return (\n    <div className=\"container p-3\">\n      <Tabs defaultActiveKey={activeTab} onChange={tabIndex => setTab(tabIndex)}>\n        <TabPane tab=\"SIGN IN\" key=\"1\">\n          <SignIn />\n        </TabPane>\n        <TabPane tab=\"SIGN UP\" key=\"2\">\n          <SignUp />\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default LoginIndex;\n","import React, { useState, useContext, createContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport { Modal } from \"antd\";\nimport { ME_QUERY } from \"../../utility/QUERY\";\nimport LoginIndex from \"../Login/LoginIndex\";\n\nconst CurrentUser = createContext(undefined);\n\nconst Login = props => {\n  const [showModal, switchModal] = useState(true);\n  return (\n    <Query query={ME_QUERY}>\n      {({ loading, error, data }) => {\n        if (error) return \"error\";\n        if (loading) return \"loading\";\n        if (!data.me) {\n          return (\n            <Modal\n              visible={showModal}\n              title={null}\n              closable={false}\n              maskClosable={false}\n              onCancel={() => switchModal(false)}\n              footer={null}\n            >\n              <LoginIndex showModal={showModal} />\n            </Modal>\n          );\n        }\n\n        return <CurrentUser.Provider value={data.me}>{props.children}</CurrentUser.Provider>;\n      }}\n    </Query>\n  );\n};\n\nLogin.propTypes = {};\n\nexport default Login;\nexport { CurrentUser };\n","import React, { useState, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Mutation } from \"react-apollo\";\nimport { ADD_TODO } from \"../../utility/MUTATION\";\nimport { LIST_QUERY } from \"../../utility/QUERY\";\nimport { Input, Button } from \"antd\";\nimport { CurrentUser } from \"../Shared/Login\";\n\nconst AddBttn = props => {\n  const [todoContent, setContent] = useState(\"\");\n  const User = useContext(CurrentUser);\n  return (\n    <Mutation\n      mutation={ADD_TODO}\n      update={(cache, { data: { updateTask } }) => {\n        const data = cache.readQuery({\n          query: LIST_QUERY,\n          variables: { id: props.taskId }\n        });\n        data.task.list = [...updateTask.list];\n        cache.writeQuery({\n          query: LIST_QUERY,\n          variables: { id: props.taskId },\n          data\n        });\n      }}\n      optimisticResponse={{\n        __typename: \"Mutation\",\n        updateTask: {\n          __typename: \"Task\",\n          id: props.taskId,\n          name: props.taskName,\n          list: props.list\n        }\n      }}\n    >\n      {(updateTask, { loading }) => {\n        return (\n          <div className=\"creationInput\">\n            <Input\n              onChange={e => setContent(e.target.value)}\n              style={{ width: \"200px\" }}\n              className=\"mr-3\"\n              value={todoContent}\n            />\n            <Button\n              onClick={async e => {\n                e.preventDefault();\n                await updateTask({\n                  variables: {\n                    id: props.taskId,\n                    todo: todoContent,\n                    userId: User.id\n                  }\n                });\n                setContent(\"\");\n              }}\n            >\n              Add\n            </Button>\n          </div>\n        );\n      }}\n    </Mutation>\n  );\n};\n\nAddBttn.propTypes = {};\n\nexport default AddBttn;\n","import React, { useContext } from \"react\";\nimport { Button } from \"antd\";\nimport { Mutation } from \"react-apollo\";\nimport { LIST_QUERY } from \"../../utility/QUERY\";\nimport { UPDATE_TODO } from \"../../utility/MUTATION\";\nimport { CurrentUser } from \"../Shared/Login\";\n\nconst CompleteBttn = props => {\n  const User = useContext(CurrentUser);\n  return (\n    <Mutation\n      mutation={UPDATE_TODO}\n      refetchQueries={[{ query: LIST_QUERY, variables: { id: props.taskId } }]}\n    >\n      {(updateTodo, { loading }) => {\n        return (\n          <Button\n            icon=\"check\"\n            onClick={async e => {\n              await updateTodo({\n                variables: {\n                  id: props.todoId,\n                  taskId: props.taskId,\n                  completedBy: User.id,\n                  status: \"COMPLETED\"\n                }\n              });\n            }}\n          >\n            Complete\n          </Button>\n        );\n      }}\n    </Mutation>\n  );\n};\n\nexport default CompleteBttn;\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport { Mutation } from \"react-apollo\";\nimport { LIST_QUERY } from \"../../utility/QUERY\";\nimport { DELETE_TODO } from \"../../utility/MUTATION\";\n\nconst MutationBttn = props => {\n  return (\n    <Mutation\n      mutation={DELETE_TODO}\n      optimisticResponse={{\n        __typename: \"Mutation\",\n        deleteTodo: {\n          __typename: \"Todo\",\n          id: props.todoId\n        }\n      }}\n      update={(cache, { data: { deleteTodo } }) => {\n        const { task } = cache.readQuery({ query: LIST_QUERY, variables: { id: props.taskId } });\n        task.list = task.list.filter(t => t.id !== deleteTodo.id);\n        cache.writeQuery({ query: LIST_QUERY, variables: { id: props.taskId }, data: { task } });\n      }}\n    >\n      {(deleteTodo, { loading }) => {\n        return (\n          <Button\n            icon=\"delete\"\n            style={{ width: \"100%\" }}\n            className=\"d-flex justify-content-start\"\n            onClick={async () => {\n              await deleteTodo({\n                variables: {\n                  id: props.todoId,\n                  taskId: props.taskId\n                }\n              });\n            }}\n          >\n            Delete\n          </Button>\n        );\n      }}\n    </Mutation>\n  );\n};\n\nexport default MutationBttn;\n","import React, { useContext } from \"react\";\nimport { Button } from \"antd\";\nimport { Mutation } from \"react-apollo\";\nimport { LIST_QUERY } from \"../../utility/QUERY\";\nimport { UPDATE_TODO } from \"../../utility/MUTATION\";\nimport { CurrentUser } from \"../Shared/Login\";\n\nconst ActiveBttn = props => {\n  const User = useContext(CurrentUser);\n  return (\n    <Mutation\n      mutation={UPDATE_TODO}\n      refetchQueries={[{ query: LIST_QUERY, variables: { id: props.taskId } }]}\n    >\n      {(updateTodo, { loading }) => {\n        return (\n          <Button\n            icon=\"check\"\n            onClick={async () => {\n              await updateTodo({\n                variables: {\n                  id: props.todoId,\n                  taskId: props.taskId,\n                  completedBy: User.id,\n                  status: \"ACTIVE\"\n                }\n              });\n            }}\n          >\n            ACTIVE\n          </Button>\n        );\n      }}\n    </Mutation>\n  );\n};\n\nexport default ActiveBttn;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Table, Menu, Dropdown, Button, Icon } from \"antd\";\nimport { withRouter } from \"react-router\";\nimport TimeAgo from \"react-timeago\";\nimport CompleteBttn from \"./CompleteBttn\";\nimport DeleteBttn from \"./DeleteBttn\";\nimport ActiveBttn from \"./ActiveBttn\";\n\nconst ListTable = props => {\n  const columns = [\n    {\n      title: \"Description\",\n      dataIndex: \"name\",\n      width: \"25%\",\n      render: (text, record) => {\n        return (\n          <>\n            <h6>{text}</h6>\n            <span className=\"text-muted\">\n              <TimeAgo date={record.createdAt} />\n            </span>\n          </>\n        );\n      }\n    },\n\n    {\n      title: \"Completed\",\n      width: \"25%\",\n      dataIndex: \"completedBy\",\n      render: (text, record) => {\n        if (text) {\n          return (\n            <h5>\n              <span className=\"badge badge-pill badge-success\">{text.name}</span>\n            </h5>\n          );\n        }\n        return \"n/a\";\n      }\n    },\n    {\n      title: \"Actions\",\n      width: \"25%\",\n      dataIndex: \"id\",\n      render: (text, record) => {\n        return (\n          <Dropdown\n            placement=\"bottomCenter\"\n            overlay={\n              <Menu>\n                <Menu.Item key=\"1\">\n                  <CompleteBttn todoId={text} taskId={props.match.params.TaskId} />\n                </Menu.Item>\n                <Menu.Item key=\"2\">\n                  <ActiveBttn todoId={text} taskId={props.match.params.TaskId} />\n                </Menu.Item>\n                <Menu.Item key=\"3\">\n                  <DeleteBttn todoId={text} taskId={props.match.params.TaskId} />\n                </Menu.Item>\n              </Menu>\n            }\n          >\n            <Button style={{ marginLeft: 8 }}>\n              <Icon type=\"edit\" />\n            </Button>\n          </Dropdown>\n        );\n      }\n    }\n  ];\n  const { task, todoStatus, subscribeToNewTodos, subscribeToEditTodos, subscribeToDeleteTodos } = props;\n  const list = todoStatus === \"ALL\" ? task.list : task.list.filter(L => L.status === todoStatus);\n  useEffect(() => {\n    subscribeToNewTodos();\n    subscribeToDeleteTodos();\n  }, []);\n  return (\n    <div className=\"col-12\">\n      <Table rowKey={record => record.id} columns={columns} dataSource={list} />\n    </div>\n  );\n};\n\nListTable.propTypes = {};\n\nexport default withRouter(ListTable);\n","import gql from \"graphql-tag\";\n\nconst TODO_ADD_SUBSCRIPTION = gql`\n  subscription TaskAdded($taskId: ID!) {\n    TaskAdded(taskId: $taskId) {\n      id\n      name\n      list {\n        id\n        name\n        status\n        createdAt\n        updatedAt\n        completedBy {\n          name\n        }\n        createdBy {\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst TODO_EDIT_SUBSCRIPTION = gql`\n  subscription UpdateTodo($taskIds: [ID]!) {\n    UpdateTodo(taskIds: $taskIds) {\n      id\n      name\n      __typename\n      status\n      completedBy {\n        name\n      }\n    }\n  }\n`;\n\nconst TODO_DELETE_SUBSCRIPTION = gql`\n  subscription DeleteTodo($taskIds: [ID]!) {\n    DeleteTodo(taskIds: $taskIds) {\n      id\n      name\n      updatedAt\n    }\n  }\n`;\n\nexport { TODO_ADD_SUBSCRIPTION, TODO_EDIT_SUBSCRIPTION, TODO_DELETE_SUBSCRIPTION };\n","import React, { createContext, useReducer, useContext, useEffect, useState } from \"react\";\nimport { withApollo } from \"react-apollo\";\nconst TabSubscription = createContext(undefined);\nconst initialState = { tasks: [] };\n\nlet reducer = (state, action) => {\n  switch (action.type) {\n    case \"reset\":\n      return initialState;\n    case \"updateTasks\":\n      return { tasks: action.data };\n    case \"updateSubscripTasks\":\n      const updatedTask = state.tasks.map(task => (task.id === action.data.id ? action.data : task));\n      console.log(\"Hello updateSubscripTasks\", updatedTask); // log is here\n      return { tasks: updatedTask };\n    default:\n      return state;\n  }\n};\nconst TabSubscriptionProvider = props => {\n  // let [state, dispatch] = useReducer(reducer, initialState);\n  // const [tasks, setTasks] = useState([]);\n  //   useEffect(() => {});\n  //   let { value } = props;\n  return (\n    <TabSubscription.Provider value={useReducer(reducer, initialState)}>\n      {props.children}\n    </TabSubscription.Provider>\n  );\n};\n\nconst TabSubscriptionConsumer = TabSubscription.Consumer;\nconst enhanceTabSub = withApollo(TabSubscriptionProvider);\nconst useStateValue = () => useContext(TabSubscription);\nexport { TabSubscription, useStateValue, TabSubscriptionConsumer, enhanceTabSub as TabSubscriptionProvider };\n","import React, { useState, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Radio, notification } from \"antd\";\nimport { withRouter } from \"react-router\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { LIST_QUERY } from \"../../utility/QUERY\";\nimport AddBttn from \"./AddBttn\";\nimport ListTable from \"./ListTable\";\nimport { CurrentUser } from \"../Shared/Login\";\nimport {\n  TODO_ADD_SUBSCRIPTION,\n  TODO_EDIT_SUBSCRIPTION,\n  TODO_DELETE_SUBSCRIPTION\n} from \"../../utility/SUBSCRIPTION\";\nimport { useStateValue } from \"../../context/TabSubscription\";\nconst List = props => {\n  const User = useContext(CurrentUser);\n  const [todoStatus, setStatus] = useState(\"ALL\");\n  const [_, dispatch] = useStateValue();\n\n  return (\n    <Query\n      query={LIST_QUERY}\n      variables={{\n        id: props.match.params.TaskId\n      }}\n    >\n      {({ loading, error, data, subscribeToMore }) => {\n        if (loading) return <p>Loading...</p>;\n        if (error) return <p>Error :(</p>;\n        const { task } = data;\n\n        return (\n          <div className=\"container bg-white p-3\">\n            <div className=\"row mb-3\">\n              <div className=\"col-12 d-flex justify-content-between\">\n                <AddBttn taskId={props.match.params.TaskId} taskName={task.name} list={task.list} />\n                <Radio.Group value={todoStatus} onChange={e => setStatus(e.target.value)}>\n                  <Radio.Button value=\"ALL\">ALL</Radio.Button>\n                  <Radio.Button value=\"ACTIVE\">ACTIVE</Radio.Button>\n                  <Radio.Button value=\"COMPLETED\">COMPLETED</Radio.Button>\n                </Radio.Group>\n              </div>\n            </div>\n            <div className=\"row no-gutters\">\n              <ListTable\n                task={task}\n                todoStatus={todoStatus}\n                subscribeToNewTodos={() =>\n                  subscribeToMore({\n                    document: TODO_ADD_SUBSCRIPTION,\n                    variables: { taskId: User.id },\n                    updateQuery: (prev, { subscriptionData }) => {\n                      dispatch({ type: \"updateSubscripTasks\", data: prev.task });\n                      return {\n                        ...prev\n                      };\n                    }\n                  })\n                }\n                subscribeToEditTodos={() =>\n                  subscribeToMore({\n                    document: TODO_EDIT_SUBSCRIPTION,\n                    variables: { taskIds: [props.match.params.TaskId] },\n                    updateQuery: (prev, { subscriptionData }) => {\n                      console.log(\"Hello prev.task\", prev.task); // log is here\n                      console.log(\"Hello subscriptionData\", subscriptionData); // log is here\n                      dispatch({ type: \"updateSubscripTasks\", data: prev.task });\n                      return prev;\n                    }\n                  })\n                }\n                subscribeToDeleteTodos={() =>\n                  subscribeToMore({\n                    document: TODO_DELETE_SUBSCRIPTION,\n                    variables: { taskIds: [props.match.params.TaskId] },\n                    updateQuery: (prev, { subscriptionData }) => {\n                      if (subscriptionData.data.DeleteTodo) {\n                        const deleteTodoID = subscriptionData.data.DeleteTodo.id;\n                        prev.task.list = prev.task.list.filter(list => list.id !== deleteTodoID);\n                      }\n                      return prev;\n                    }\n                  })\n                }\n              />\n            </div>\n          </div>\n        );\n      }}\n    </Query>\n  );\n};\n\nList.propTypes = {};\nexport default withRouter(List);\n","import React, { useState, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form, Button, Icon, Input, Divider } from \"antd\";\nimport { Mutation } from \"react-apollo\";\nimport { ME_QUERY, TASKS_QUERY } from \"../../utility/QUERY\";\nimport { LINK_TASK, ADD_TASK_MUTATION } from \"../../utility/MUTATION\";\nimport { CurrentUser } from \"../Shared/Login\";\n\nconst TaskAdd = props => {\n  const [serialNum, setSerialNum] = useState(\"\");\n  const [disableBttn, setDisableBttn] = useState(false);\n  const User = useContext(CurrentUser);\n  const { getFieldDecorator, setFieldsValue, validateFields } = props.form;\n  const handleSubmit = (e, createTask) => {\n    e.preventDefault();\n    setDisableBttn(true);\n    validateFields(async (err, values) => {\n      try {\n        if (!err) {\n          await createTask({ variables: { name: values.taskName } });\n          setFieldsValue({ taskName: \"\" });\n          props.switchModal(false);\n          setDisableBttn(false);\n        }\n      } catch (error) {\n        console.log(\"createTask error\", error); // log is here\n      }\n    });\n  };\n  return (\n    <Form onSubmit={handleSubmit} className=\"login-form\">\n      <Mutation\n        mutation={ADD_TASK_MUTATION}\n        refetchQueries={[{ query: TASKS_QUERY, variables: { userId: User.id } }]}\n        update={(cache, { data: { createTask } }) => {\n          const { me } = cache.readQuery({ query: ME_QUERY });\n          const data = { ...me, tasks: me.tasks.concat([createTask]) };\n          cache.writeQuery({\n            query: ME_QUERY,\n            data: { me: data }\n          });\n        }}\n      >\n        {(createTask, { loading }) => {\n          return (\n            <>\n              <Form.Item>\n                <h6>Create Task</h6>\n                {getFieldDecorator(\"taskName\", {\n                  rules: [{ required: true, message: \"Please input your Task Name!\" }]\n                })(\n                  <Input\n                    size=\"large\"\n                    prefix={<Icon type=\"book\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n                    placeholder=\"Task Name\"\n                  />\n                )}\n              </Form.Item>\n              <Form.Item>\n                <Button\n                  disabled={disableBttn}\n                  onClick={e => handleSubmit(e, createTask)}\n                  htmlType=\"submit\"\n                  type=\"primary\"\n                  block\n                >\n                  CREATE\n                </Button>\n              </Form.Item>\n            </>\n          );\n        }}\n      </Mutation>\n\n      <Divider> or </Divider>\n      <Mutation mutation={LINK_TASK} refetchQueries={[{ query: ME_QUERY }]}>\n        {(linkTask, { loading }) => {\n          return (\n            <>\n              <Form.Item>\n                <h6>Join a Task</h6>\n                <Input\n                  size=\"large\"\n                  prefix={<Icon type=\"book\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\n                  placeholder=\"Task ID\"\n                  value={serialNum}\n                  onChange={e => setSerialNum(e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item>\n                <Button\n                  block\n                  onClick={async () => {\n                    const res = await linkTask({ variables: { serialNum } });\n                    console.log(\"Hello res\", res); // log is here\n                  }}\n                >\n                  JOIN\n                </Button>\n              </Form.Item>\n            </>\n          );\n        }}\n      </Mutation>\n    </Form>\n  );\n};\n\nTaskAdd.propTypes = {};\n\nexport default Form.create()(TaskAdd);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TimeAgo from \"react-timeago\";\nimport { List, Avatar, Icon } from \"antd\";\nconst PersonalTab = props => {\n  return (\n    <List\n      itemLayout=\"vertical\"\n      dataSource={props.tasks}\n      renderItem={item => {\n        const latestTodo = item.list.slice(-1)[0];\n        return (\n          <List.Item>\n            <List.Item.Meta\n              className=\"mb-0\"\n              avatar={\n                latestTodo ? (\n                  <Avatar style={{ backgroundColor: \"#87d068\" }}>\n                    {latestTodo.completedBy ? latestTodo.completedBy.name[0] : latestTodo.createdBy.name[0]}\n                  </Avatar>\n                ) : (\n                  <Avatar icon=\"user\" />\n                )\n              }\n              title={item.name}\n              description={\n                <>\n                  {latestTodo ? (\n                    <>\n                      {latestTodo.completedBy ? (\n                        <span>\n                          {latestTodo.name} <b>Completed</b> by {latestTodo.completedBy.name}\n                        </span>\n                      ) : (\n                        <span>\n                          {latestTodo.name} <b>Created</b> by {latestTodo.createdBy.name}\n                        </span>\n                      )}\n                      <div className=\"d-flex mt-1 align-items-center\">\n                        <Icon type=\"clock-circle\" className=\"mr-2\" />\n                        <TimeAgo date={latestTodo.updatedAt} />\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <span>\n                        Task <b>Created</b>\n                      </span>\n                      <div className=\"d-flex mt-1 align-items-center\">\n                        <Icon type=\"clock-circle\" className=\"mr-2\" />\n                        <TimeAgo date={item.createdAt} />\n                      </div>\n                    </>\n                  )}\n                </>\n              }\n            />\n          </List.Item>\n        );\n      }}\n    />\n  );\n};\n\nPersonalTab.propTypes = {};\n\nexport default PersonalTab;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport TimeAgo from \"react-timeago\";\nimport { List, Avatar, Icon } from \"antd\";\nimport { useStateValue } from \"../../context/TabSubscription\";\nimport sortBy from \"lodash/sortBy\";\nconst CorporateTab = props => {\n  const [{ tasks }, dispatch] = useStateValue();\n  useEffect(() => {\n    dispatch({ type: \"updateTasks\", data: props.tasks });\n  }, []);\n  console.log(\"Hello tasks\", tasks); // log is here\n  return (\n    <List\n      itemLayout=\"vertical\"\n      dataSource={tasks}\n      renderItem={item => {\n        const latestTodo = sortBy(item.list, \"updatedAt\").slice(-1)[0];\n        console.log(\"Hello latestTodo\", latestTodo); // log is here\n        return (\n          <List.Item>\n            <List.Item.Meta\n              className=\"mb-0\"\n              avatar={\n                latestTodo ? (\n                  <Avatar style={{ backgroundColor: \"#87d068\" }}>\n                    {latestTodo.completedBy ? latestTodo.completedBy.name[0] : latestTodo.createdBy.name[0]}\n                  </Avatar>\n                ) : (\n                  <Avatar icon=\"user\" />\n                )\n              }\n              title={item.name}\n              description={\n                <>\n                  {latestTodo ? (\n                    <>\n                      {latestTodo.completedBy ? (\n                        <span>\n                          {latestTodo.name} <b>Completed</b> by {latestTodo.completedBy.name}\n                        </span>\n                      ) : (\n                        <span>\n                          {latestTodo.name} <b>Created</b> by {latestTodo.createdBy.name}\n                        </span>\n                      )}\n                      <div className=\"d-flex mt-1 align-items-center\">\n                        <Icon type=\"clock-circle\" className=\"mr-2\" />\n                        <TimeAgo date={latestTodo.updatedAt} />\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <span>\n                        Task <b>Created</b>\n                      </span>\n                      <div className=\"d-flex mt-1 align-items-center\">\n                        <Icon type=\"clock-circle\" className=\"mr-2\" />\n                        <TimeAgo date={item.createdAt} />\n                      </div>\n                    </>\n                  )}\n                </>\n              }\n            />\n          </List.Item>\n        );\n      }}\n    />\n  );\n};\n\nCorporateTab.propTypes = {};\n\nexport default CorporateTab;\n","import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Tabs, Icon } from \"antd\";\nimport { Query, Subscription } from \"react-apollo\";\nimport PersonalTab from \"../TaskTab/PersonalTab\";\nimport { TASKS_QUERY } from \"../../utility/QUERY\";\nimport { CurrentUser } from \"../Shared/Login\";\nimport CorporateTab from \"../TaskTab/CorporateTab\";\n\nconst TabPane = Tabs.TabPane;\n\nconst TaskTab = props => {\n  const User = useContext(CurrentUser);\n  const { tasks, corporateTasks } = props;\n\n  return (\n    <Tabs defaultActiveKey=\"1\" onChange={() => {}}>\n      <TabPane\n        tab={\n          <span>\n            <Icon type=\"user\" />\n            Personal\n          </span>\n        }\n        key=\"1\"\n      >\n        <PersonalTab tasks={tasks} />\n      </TabPane>\n      <TabPane\n        tab={\n          <span>\n            <Icon type=\"team\" />\n            Corporate\n          </span>\n        }\n        key=\"2\"\n      >\n        <CorporateTab tasks={corporateTasks} />\n      </TabPane>\n    </Tabs>\n  );\n};\n\nTaskTab.propTypes = {};\n\nexport default TaskTab;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Query } from \"react-apollo\";\nimport { Avatar, Tooltip } from \"antd\";\nimport { COOPERATORS_QUERY } from \"../../utility/QUERY\";\n\nconst Corporaters = props => {\n  const { User } = props;\n  return (\n    <Query query={COOPERATORS_QUERY} variables={{ userId: User.id }}>\n      {({ data, loading, error }) => {\n        if (loading) return \"Loading...\";\n        if (error) return \"Error...\";\n\n        const { cooperators } = data;\n        return (\n          <div className=\"personal__corporatersList\">\n            {cooperators.map(u => (\n              <Tooltip key={u.id} placement=\"top\" title={u.name}>\n                <Avatar size={30}>{u.name[0]}</Avatar>\n              </Tooltip>\n            ))}\n          </div>\n        );\n      }}\n    </Query>\n  );\n};\n\nCorporaters.propTypes = {};\n\nexport default Corporaters;\n","import React, { useState, useContext, useEffect } from \"react\";\nimport { Layout, Avatar, Modal, Button, notification } from \"antd\";\nimport { CurrentUser } from \"./Login\";\nimport { Query, Subscription } from \"react-apollo\";\nimport TaskAdd from \"../Task/TaskAdd\";\nimport TaskTab from \"./TaskTab\";\nimport Corporaters from \"./Corporaters\";\nimport isEmpty from \"lodash/isEmpty\";\nimport {\n  TODO_ADD_SUBSCRIPTION,\n  TODO_EDIT_SUBSCRIPTION,\n  TODO_DELETE_SUBSCRIPTION\n} from \"../../utility/SUBSCRIPTION\";\nimport { TASKS_QUERY } from \"../../utility/QUERY\";\nconst { Sider } = Layout;\n\nconst Panel = props => {\n  const [showTaskModal, switchModal] = useState(false);\n  const [taskNotice, switchNotice] = useState({});\n  const User = useContext(CurrentUser);\n  const popUp = (type = \"success\") => {\n    const message =\n      type === \"success\"\n        ? `Todo item ${taskNotice.name} has been created by ${taskNotice.createdBy.name}`\n        : taskNotice.message;\n    notification[type]({\n      message: \"Notification Title\",\n      description: message,\n      onClick: () => {\n        console.log(\"Notification Clicked!\");\n      }\n    });\n  };\n  useEffect(() => {\n    !isEmpty(taskNotice) && popUp(taskNotice.type);\n  });\n\n  return (\n    <Query query={TASKS_QUERY} variables={{ userId: User.id }}>\n      {({ data, loading, error }) => {\n        if (error) return \"error\";\n        if (loading) return \"loading\";\n        const { tasks } = data;\n        const corporateTasks = tasks.filter(t => t.cooperators.length > 1);\n        return (\n          <Sider\n            breakpoint=\"lg\"\n            collapsedWidth=\"0\"\n            onBreakpoint={broken => {}}\n            theme=\"light\"\n            width=\"380\"\n            className=\"shadow\"\n          >\n            <div className=\"personal p-3\">\n              <div className=\"personal__info d-flex mt-5 mb-4\">\n                <div className=\"personal__avatar\">\n                  <Avatar size={64} icon=\"user\" />\n                </div>\n                <div className=\"personal__name d-flex align-items-center p-3\">{User.name}</div>\n              </div>\n              <hr />\n              <div className=\"personal__tasks mt-5 w-100 position-static\">\n                <h5>Tasks</h5>\n                <div className=\"d-flex justify-content-end\">\n                  <Button onClick={() => switchModal(true)} shape=\"circle\" icon=\"plus\" />\n                </div>\n                <TaskTab tasks={tasks} corporateTasks={corporateTasks} />\n              </div>\n              <hr />\n              <div className=\"personal__corporaters mt-5\">\n                <h5>Corporaters</h5>\n                <Corporaters User={User} />\n              </div>\n              <Modal\n                visible={showTaskModal}\n                title={null}\n                closable={false}\n                onCancel={() => switchModal(false)}\n                footer={null}\n              >\n                <TaskAdd switchModal={switchModal} />\n              </Modal>\n            </div>\n            <Subscription subscription={TODO_ADD_SUBSCRIPTION} variables={{ taskId: User.id }}>\n              {({ data, loading }) => {\n                if (data && data.TaskAdded) {\n                  const popUpNotice = data.TaskAdded.list.slice(-1)[0];\n                  switchNotice(popUpNotice);\n                }\n                return null;\n              }}\n            </Subscription>\n            <Subscription\n              subscription={TODO_EDIT_SUBSCRIPTION}\n              variables={{ taskIds: corporateTasks.map(task => task.id) }}\n            >\n              {({ data, loading }) => {\n                if (data && data.UpdateTodo) {\n                  const message = `Todo item ${data.UpdateTodo.name} has been updated by ${\n                    data.UpdateTodo.completedBy.name\n                  }`;\n                  switchNotice({ message, type: \"info\" });\n                }\n                return null;\n              }}\n            </Subscription>\n            <Subscription\n              subscription={TODO_DELETE_SUBSCRIPTION}\n              variables={{ taskIds: corporateTasks.map(task => task.id) }}\n            >\n              {({ data, loading }) => {\n                if (data && data.DeleteTodo) {\n                  const message = `Todo item ${data.DeleteTodo.name} was delete at ${\n                    data.DeleteTodo.updatedAt\n                  }`;\n                  switchNotice({ message, type: \"warning\" });\n                }\n                return null;\n              }}\n            </Subscription>\n          </Sider>\n        );\n      }}\n    </Query>\n  );\n};\n\nexport default Panel;\n","import React, { Component } from \"react\";\nimport \"./style/App.scss\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport TaskIndex from \"./containers/TaskIndex\";\nimport { ApolloProvider } from \"react-apollo\";\nimport List from \"./components/List/List\";\nimport LoginIndex from \"./components/Login/LoginIndex\";\nimport { Layout, Button } from \"antd\";\nimport Panel from \"./components/Shared/Panel\";\nimport Login from \"./components/Shared/Login\";\nimport { TabSubscriptionProvider } from \"./context/TabSubscription\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink, split } from \"apollo-link\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { endPoint, ProdEndPoint, endWSPoint, ProdWSEndPoint } from \"./utility/config\";\nconst { Header, Content, Footer } = Layout;\n\nconsole.log(\"Hello process.env.NODE_ENV\", process.env.NODE_ENV); // log is here\nconst httpLink = new HttpLink({\n  uri: process.env.NODE_ENV === \"development\" ? endPoint : ProdEndPoint,\n  credentials: \"include\"\n});\n\n// Create a WebSocket link:\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:5678/`,\n  uri: process.env.NODE_ENV === \"development\" ? endWSPoint : ProdWSEndPoint,\n\n  options: {\n    reconnect: true\n  }\n});\n\n// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const { kind, operation } = getMainDefinition(query);\n    return kind === \"OperationDefinition\" && operation === \"subscription\";\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache()\n});\n\n// import ApolloClient from \"apollo-boost\";\n// const client = new ApolloClient({\n//   uri: \"http://localhost:5678\",\n//   request: operation => {\n//     operation.setContext({\n//       fetchOptions: {\n//         credentials: \"include\"\n//       }\n//     });\n//   }\n// });\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <Login>\n            <TabSubscriptionProvider>\n              <Layout className=\"app__container\">\n                <Panel />\n                <Layout>\n                  <Header style={{ background: \"#fff\", padding: 0 }}>\n                    <Link className=\"ml-3\" to=\"/\">\n                      <Button shape=\"circle\" icon=\"left\" />\n                    </Link>\n                  </Header>\n                  <Content style={{ margin: \"24px 16px 0\" }}>\n                    <Switch>\n                      <Route exact path=\"/\" component={TaskIndex} />\n                      <Route path=\"/list/:TaskId\" component={List} />\n                      <Route path=\"/login\" component={LoginIndex} />\n                    </Switch>\n                  </Content>\n                  <Footer style={{ textAlign: \"center\" }}>Ant Design ©2018 Created by Ant UED</Footer>\n                </Layout>\n              </Layout>\n            </TabSubscriptionProvider>\n          </Login>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","const endPoint = \"http://localhost:5678\";\nconst ProdEndPoint = \"https://gqtodolist-prod.herokuapp.com/\";\n\nconst endWSPoint = \"ws://localhost:5678\";\nconst ProdWSEndPoint = \"ws://gqtodolist-prod.herokuapp.com/\";\nexport { endPoint, ProdEndPoint, endWSPoint, ProdWSEndPoint };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}